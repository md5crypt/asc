/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8,9,12,17,19,24,58,67,68,69,70,71,72,74,75],$V1=[2,23],$V2=[1,10],$V3=[1,13],$V4=[1,11],$V5=[1,8],$V6=[1,9],$V7=[1,12],$V8=[1,14],$V9=[1,15],$Va=[1,16],$Vb=[1,17],$Vc=[1,18],$Vd=[1,19],$Ve=[1,20],$Vf=[1,21],$Vg=[1,32],$Vh=[1,25],$Vi=[1,28],$Vj=[1,29],$Vk=[1,26],$Vl=[1,27],$Vm=[1,30],$Vn=[1,31],$Vo=[1,33],$Vp=[1,34],$Vq=[1,35],$Vr=[1,36],$Vs=[1,37],$Vt=[5,9,27,28,31,49,50,54,55,58,59,60,61,62,63,64,65,66],$Vu=[2,36],$Vv=[5,27,28],$Vw=[1,80],$Vx=[1,78],$Vy=[1,79],$Vz=[1,81],$VA=[1,55],$VB=[1,56],$VC=[1,57],$VD=[1,58],$VE=[1,59],$VF=[1,60],$VG=[1,61],$VH=[1,62],$VI=[1,63],$VJ=[1,64],$VK=[1,65],$VL=[1,66],$VM=[1,67],$VN=[1,68],$VO=[1,69],$VP=[1,70],$VQ=[1,71],$VR=[1,72],$VS=[1,73],$VT=[1,74],$VU=[1,75],$VV=[1,76],$VW=[5,9,17,19,23,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75],$VX=[9,23],$VY=[5,9,27,28,31,50,54,55,58,59,60,61,62,63,64,65,66],$VZ=[2,34],$V_=[1,107],$V$=[1,8,9,12,17,19,24,27,28,58,67,68,69,70,71,72,74,75],$V01=[9,17,19,24,58,67,68,69,70,71,72,74,75],$V11=[5,9,17,19,23,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75],$V21=[5,9,17,19,23,27,28,31,32,33,34,35,36,37,38,39,40,41,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75],$V31=[5,9,17,19,23,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75],$V41=[5,9,17,19,23,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75],$V51=[5,9,17,19,23,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"file":3,"program":4,"NL":5,"statments":6,"object":7,"FUNCTION":8,"VARNAME":9,"arguments":10,"fblock":11,"NAMESPACE":12,"nullblock":13,"argument":14,"TYPE":15,"body":16,"IF":17,"ifexpression":18,"WHILE":19,"whileexpression":20,"command":21,"block":22,"INDT":23,"DEDT":24,"fstatments":25,"expression":26,"ELSE":27,"ELSEIF":28,"safeexpr":29,"exprlist":30,"(":31,")":32,"||":33,"&&":34,"|":35,"^":36,"&":37,"==":38,"===":39,"!=":40,"!==":41,"<":42,"<=":43,">=":44,">":45,"<<":46,">>":47,"+":48,"-":49,"--":50,"*":51,"/":52,"%":53,"!":54,"~":55,"?":56,":":57,"{":58,"}":59,"[":60,"]":61,"NUMBER":62,"HEXNUMBER":63,"BINNUMBER":64,"ATOM":65,"STRING":66,"CONTINUE":67,"YIELD":68,"BREAK":69,"RETURN":70,"THROW":71,"LOCAL":72,"=":73,"SET":74,"UNSET":75,"$accept":0,"$end":1},
terminals_: {2:"error",5:"NL",8:"FUNCTION",9:"VARNAME",12:"NAMESPACE",15:"TYPE",17:"IF",19:"WHILE",23:"INDT",24:"DEDT",27:"ELSE",28:"ELSEIF",31:"(",32:")",33:"||",34:"&&",35:"|",36:"^",37:"&",38:"==",39:"===",40:"!=",41:"!==",42:"<",43:"<=",44:">=",45:">",46:"<<",47:">>",48:"+",49:"-",50:"--",51:"*",52:"/",53:"%",54:"!",55:"~",56:"?",57:":",58:"{",59:"}",60:"[",61:"]",62:"NUMBER",63:"HEXNUMBER",64:"BINNUMBER",65:"ATOM",66:"STRING",67:"CONTINUE",68:"YIELD",69:"BREAK",70:"RETURN",71:"THROW",72:"LOCAL",73:"=",74:"SET",75:"UNSET"},
productions_: [0,[3,1],[3,2],[4,1],[7,4],[7,3],[14,1],[14,2],[10,2],[10,0],[16,1],[16,2],[16,2],[16,2],[16,1],[22,3],[11,3],[13,1],[13,1],[6,2],[6,3],[6,3],[6,3],[6,0],[25,3],[25,3],[25,3],[25,0],[18,2],[18,4],[18,4],[18,4],[18,4],[20,2],[29,1],[30,2],[30,0],[26,3],[26,4],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,2],[26,2],[26,2],[26,5],[26,4],[26,3],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[21,5],[21,2],[21,1],[21,2],[21,1],[21,1],[21,2],[21,1],[21,2],[21,2],[21,4],[21,2],[21,5],[21,4],[21,7],[21,2],[21,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 3:
 yy.parser.func(_$[$0],'@main',[],yy.parser.wrapblock($$[$0])); 
break;
case 4:
 this.$ = yy.parser.func(_$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 5:
 this.$ = yy.parser.namespace(_$[$0-2],$$[$0-1],$$[$0]); 
break;
case 7:
 this.$ = $$[$0-1]+$$[$0]; 
break;
case 8: case 35:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 9: case 23: case 27: case 36:
 this.$ = []; 
break;
case 10: case 11: case 12:
 this.$ = $$[$0]; 
break;
case 13: case 15: case 16:
 this.$ = yy.parser.wrapblock($$[$0-1]); 
break;
case 14: case 18:
 this.$ = yy.parser.wrapblock([]); 
break;
case 19:
 this.$ = $$[$0-1]; this.$.push.apply(this.$,$$[$0]); /*a*/ 
break;
case 20: case 24:
 this.$ = $$[$0-2]; this.$.push.apply(this.$,$$[$0-1]); /*c*/
break;
case 21: case 25:
 this.$ = $$[$0-2]; this.$.push.apply(this.$,$$[$0]); /*d*/
break;
case 22: case 26:
 this.$ = $$[$0-2]; this.$.push.apply(this.$,$$[$0]); /*e*/
break;
case 28:
 this.$ = yy.parser.ifblock(_$[$0-1],$$[$0-1],$$[$0],null); 
break;
case 29: case 31:
 this.$ = yy.parser.ifblock(_$[$0-3],$$[$0-3],$$[$0-2],$$[$0]); 
break;
case 30: case 32:
 this.$ = yy.parser.ifblock(_$[$0-3],$$[$0-3],yy.parser.wrapblock($$[$0-2]),$$[$0]); 
break;
case 33:
 this.$ = yy.parser.whileblock(_$[$0],$$[$0-1],$$[$0]); 
break;
case 37:
 this.$ = $$[$0-1] 
break;
case 38:
 this.$ = yy.parser.index(_$[$0-3],$$[$0-3],$$[$0-2]); 
break;
case 39:
 this.$ = yy.parser.expr(_$[$0-2],$$[$0-2],'||',$$[$0]); 
break;
case 40:
 this.$ = yy.parser.expr(_$[$0-2],$$[$0-2],'&&',$$[$0]); 
break;
case 41:
 this.$ = yy.parser.expr(_$[$0-2],$$[$0-2],'|',$$[$0]); 
break;
case 42:
 this.$ = yy.parser.expr(_$[$0-2],$$[$0-2],'^',$$[$0]); 
break;
case 43:
 this.$ = yy.parser.expr(_$[$0-2],$$[$0-2],'&',$$[$0]); 
break;
case 44:
 this.$ = yy.parser.expr(_$[$0-2],$$[$0-2],'==',$$[$0]); 
break;
case 45:
 this.$ = yy.parser.expr(_$[$0-2],$$[$0-2],'===',$$[$0]); 
break;
case 46:
 this.$ = yy.parser.expr(_$[$0-2],$$[$0-2],'!=',$$[$0]); 
break;
case 47:
 this.$ = yy.parser.expr(_$[$0-2],$$[$0-2],'!==',$$[$0]); 
break;
case 48:
 this.$ = yy.parser.expr(_$[$0-2],$$[$0-2],'<',$$[$0]); 
break;
case 49:
 this.$ = yy.parser.expr(_$[$0-2],$$[$0-2],'<=',$$[$0]); 
break;
case 50:
 this.$ = yy.parser.expr(_$[$0-2],$$[$0-2],'>=',$$[$0]); 
break;
case 51:
 this.$ = yy.parser.expr(_$[$0-2],$$[$0-2],'>',$$[$0]); 
break;
case 52:
 this.$ = yy.parser.expr(_$[$0-2],$$[$0-2],'<<',$$[$0]); 
break;
case 53:
 this.$ = yy.parser.expr(_$[$0-2],$$[$0-2],'>>',$$[$0]); 
break;
case 54:
 this.$ = yy.parser.expr(_$[$0-2],$$[$0-2],'+',$$[$0]); 
break;
case 55:
 this.$ = yy.parser.expr(_$[$0-2],$$[$0-2],'-',$$[$0]); 
break;
case 56:
 this.$ = yy.parser.expr(_$[$0-2],$$[$0-2],'--',$$[$0]); 
break;
case 57:
 this.$ = yy.parser.expr(_$[$0-2],$$[$0-2],'*',$$[$0]); 
break;
case 58:
 this.$ = yy.parser.expr(_$[$0-2],$$[$0-2],'/',$$[$0]); 
break;
case 59:
 this.$ = yy.parser.expr(_$[$0-2],$$[$0-2],'%',$$[$0]); 
break;
case 60:
 this.$ = yy.parser.expr(_$[$0-1],null,'!',$$[$0]); 
break;
case 61:
 this.$ = yy.parser.expr(_$[$0-1],null,'~',$$[$0]); 
break;
case 62: case 63:
 this.$ = yy.parser.expr(_$[$0-1],null,'~~',$$[$0]); 
break;
case 64:
 this.$ = yy.parser.ifblock(_$[$0-3],$$[$0-4],$$[$0-2],$$[$0]); 
break;
case 65:
 $$[$0-1].unshift($$[$0-2]); this.$ = yy.parser.exprcall(_$[$0-3],$$[$0-1]); 
break;
case 66:
 this.$ = yy.parser.array(_$[$0-2],$$[$0-1]); 
break;
case 67:
 this.$ = yy.parser.varname(_$[$0],$$[$0]); 
break;
case 68:
 this.$ = yy.parser.number(_$[$0],$$[$0]); 
break;
case 69:
 this.$ = yy.parser.hex(_$[$0],$$[$0]); 
break;
case 70:
 this.$ = yy.parser.bin(_$[$0],$$[$0]); 
break;
case 71:
 this.$ = yy.parser.atom($$[$0]); 
break;
case 72:
 this.$ = yy.parser.string($$[$0]); 
break;
case 73:
 $$[$0-2].unshift($$[$0-3]); this.$ = yy.parser.c_call(_$[$0-4],yy.parser.exprcall(_$[$0-4],$$[$0-2]),$$[$0]); 
break;
case 74:
 this.$ = yy.parser.c_call(_$[$0-1],$$[$0-1],$$[$0]); 
break;
case 75:
 this.$ = yy.parser.c_con(_$[$0]); 
break;
case 76:
 this.$ = yy.parser.c_yie(_$[$0-1],$$[$0]); 
break;
case 77:
 this.$ = yy.parser.c_bre(_$[$0]); 
break;
case 78:
 this.$ = yy.parser.c_ret(_$[$0]); 
break;
case 79:
 this.$ = yy.parser.c_ret(_$[$0-1],$$[$0]); 
break;
case 80:
 this.$ = yy.parser.c_thr(_$[$0],[null]); 
break;
case 81:
 this.$ = yy.parser.c_thr(_$[$0-1],$$[$0]); 
break;
case 82:
 this.$ = yy.parser.c_local(_$[$0-1],$$[$0],null); 
break;
case 83:
 this.$ = yy.parser.c_local(_$[$0-3],$$[$0-2],$$[$0]); 
break;
case 84:
 this.$ = yy.parser.c_set(_$[$0-1],$$[$0],[true]); 
break;
case 85:
 this.$ = yy.parser.c_mset(_$[$0-4],$$[$0-2],$$[$0-1],[true]); 
break;
case 86:
 this.$ = yy.parser.c_set(_$[$0-3],$$[$0-2],$$[$0]); 
break;
case 87:
 this.$ = yy.parser.c_mset(_$[$0-6],$$[$0-4],$$[$0-3],$$[$0]); 
break;
case 88:
 this.$ = yy.parser.c_set(_$[$0-1],$$[$0],[null]); 
break;
case 89:
 this.$ = yy.parser.c_mset(_$[$0-4],$$[$0-2],$$[$0-1],[null]); 
break;
}
},
table: [o($V0,$V1,{3:1,4:2,6:4,5:[1,3]}),{1:[3]},{1:[2,1]},o($V0,$V1,{6:4,4:5}),{1:[2,3],7:6,8:$V2,9:$V3,12:$V4,17:$V5,19:$V6,21:7,58:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,74:$Ve,75:$Vf},{1:[2,2]},o($V0,[2,19]),{5:[1,22]},{9:$Vg,18:23,26:24,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,20:38,26:39,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:[1,40]},{9:[1,41]},{9:$Vg,26:43,29:42,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},o($Vt,$Vu,{30:44}),o($Vv,[2,75]),{9:$Vg,26:45,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},o($Vv,[2,77]),o($Vv,[2,78],{26:46,9:$Vg,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),o($Vv,[2,80],{26:47,9:$Vg,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),{9:[1,48]},{9:[1,49],31:[1,50]},{9:[1,51],31:[1,52]},o($V0,[2,20]),o($V0,[2,21]),{5:$Vw,9:$V3,11:77,16:53,17:$Vx,19:$Vy,21:54,23:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,56:$VV,58:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,74:$Ve,75:$Vf},{9:$Vg,26:82,29:83,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,26:84,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,26:85,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,26:86,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,26:87,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,26:43,29:88,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},o($Vt,$Vu,{30:89}),o($VW,[2,67]),o($VW,[2,68]),o($VW,[2,69]),o($VW,[2,70]),o($VW,[2,71]),o($VW,[2,72]),o($V0,[2,22]),{5:$Vw,9:$V3,11:77,16:90,17:$Vx,19:$Vy,21:91,23:$Vz,33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,56:$VV,58:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,74:$Ve,75:$Vf},o($VX,[2,9],{10:92}),{5:[1,95],13:93,22:94,23:[1,96]},o($Vt,$Vu,{30:97}),o($VY,$VZ,{33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VS,52:$VT,53:$VU,56:$VV}),o($Vv,[2,74],{26:43,29:98,9:$Vg,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),o($Vv,[2,76],{33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,56:$VV}),o($Vv,[2,79],{33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,56:$VV}),o($Vv,[2,81],{33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,56:$VV}),o($Vv,[2,82],{73:[1,99]}),o($Vv,[2,84],{73:[1,100]}),{9:$Vg,26:43,29:101,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},o($Vv,[2,88]),{9:$Vg,26:43,29:102,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},o($V0,[2,28],{27:[1,103],28:[1,104]}),{5:$V_,27:[1,105],28:[1,106]},{9:$Vg,26:108,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,26:109,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,26:110,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,26:111,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,26:112,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,26:113,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,26:114,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,26:115,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,26:116,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,26:117,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,26:118,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,26:119,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,26:120,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,26:121,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,26:122,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,26:123,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,26:124,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,26:125,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,26:126,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,26:127,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,26:128,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,26:129,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},o($V$,[2,10]),{9:$Vg,18:130,26:24,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,20:131,26:39,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},o($V$,[2,14]),o($V01,[2,27],{25:132}),o($VY,$VZ,{32:[1,133],33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,51:$VS,52:$VT,53:$VU,56:$VV}),{9:$Vg,26:134,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},o($V11,[2,60],{56:$VV}),o($V11,[2,61],{56:$VV}),o($V11,[2,62],{56:$VV}),o($V11,[2,63],{56:$VV}),o($Vt,$Vu,{30:135}),{9:$Vg,26:43,29:98,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,61:[1,136],62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},o($V$,[2,33]),{5:$V_},{9:[1,139],11:137,14:138,23:$Vz},o($V0,[2,5]),o($V0,[2,17]),o($V0,[2,18]),o($V0,$V1,{6:140}),{9:$Vg,26:43,29:98,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,59:[1,141],60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},o($Vt,[2,35]),{9:$Vg,26:142,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,26:143,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,26:144,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,26:145,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{5:$Vw,9:$V3,11:77,16:146,17:$Vx,19:$Vy,21:91,23:$Vz,58:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,74:$Ve,75:$Vf},{9:$Vg,18:147,26:24,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{5:$Vw,9:$V3,11:77,16:148,17:$Vx,19:$Vy,21:91,23:$Vz,58:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,74:$Ve,75:$Vf},{9:$Vg,18:149,26:24,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},o($V$,[2,13]),o([5,9,17,19,23,27,28,31,32,33,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75],[2,39],{34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,56:$VV}),o([5,9,17,19,23,27,28,31,32,33,34,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75],[2,40],{35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,56:$VV}),o([5,9,17,19,23,27,28,31,32,33,34,35,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75],[2,41],{36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,56:$VV}),o([5,9,17,19,23,27,28,31,32,33,34,35,36,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75],[2,42],{37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,56:$VV}),o([5,9,17,19,23,27,28,31,32,33,34,35,36,37,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75],[2,43],{38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,56:$VV}),o($V21,[2,44],{42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,56:$VV}),o($V21,[2,45],{42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,56:$VV}),o($V21,[2,46],{42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,56:$VV}),o($V21,[2,47],{42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,56:$VV}),o($V31,[2,48],{46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,56:$VV}),o($V31,[2,49],{46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,56:$VV}),o($V31,[2,50],{46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,56:$VV}),o($V31,[2,51],{46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,56:$VV}),o($V41,[2,52],{48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,56:$VV}),o($V41,[2,53],{48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,56:$VV}),o($V51,[2,54],{51:$VS,52:$VT,53:$VU,56:$VV}),o($V51,[2,55],{51:$VS,52:$VT,53:$VU,56:$VV}),o([5,9,17,19,23,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,50,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,74,75],[2,56],{48:$VP,49:$VQ,51:$VS,52:$VT,53:$VU,56:$VV}),o($V11,[2,57],{56:$VV}),o($V11,[2,58],{56:$VV}),o($V11,[2,59],{56:$VV}),{33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,56:$VV,57:[1,150]},o($V$,[2,11]),o($V$,[2,12]),{9:$V3,17:[1,153],19:[1,154],21:152,24:[1,151],58:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,74:$Ve,75:$Vf},o($VW,[2,37]),{32:[1,155],33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,56:$VV},{9:$Vg,26:43,29:98,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,59:[1,156],60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},o($VW,[2,66]),o($V0,[2,4]),o($VX,[2,8]),o($VX,[2,6],{15:[1,157]}),{7:6,8:$V2,9:$V3,12:$V4,17:$V5,19:$V6,21:7,24:[1,158],58:$V7,67:$V8,68:$V9,69:$Va,70:$Vb,71:$Vc,72:$Vd,74:$Ve,75:$Vf},o($Vt,$Vu,{30:159}),o($Vv,[2,83],{33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,56:$VV}),o($Vv,[2,86],{33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,56:$VV}),{32:[1,160],33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,56:$VV},{32:[1,161],33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,56:$VV},o($V$,[2,29]),o($V$,[2,31]),o($V$,[2,30]),o($V$,[2,32]),{9:$Vg,26:162,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},o($V$,[2,16]),{5:[1,163]},{9:$Vg,18:164,26:24,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},{9:$Vg,20:165,26:39,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},o($VW,[2,38]),o($VW,[2,65]),o($VX,[2,7]),o($V0,[2,15]),o($Vv,[2,73],{26:43,29:98,9:$Vg,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs}),o($Vv,[2,85],{73:[1,166]}),o($Vv,[2,89]),o($V11,[2,64],{56:$VV}),o($V01,[2,24]),o($V01,[2,25]),o($V01,[2,26]),{9:$Vg,26:167,31:$Vh,49:$Vi,50:$Vj,54:$Vk,55:$Vl,58:$Vm,60:$Vn,62:$Vo,63:$Vp,64:$Vq,65:$Vr,66:$Vs},o($Vv,[2,87],{33:$VA,34:$VB,35:$VC,36:$VD,37:$VE,38:$VF,39:$VG,40:$VH,41:$VI,42:$VJ,43:$VK,44:$VL,45:$VM,46:$VN,47:$VO,48:$VP,49:$VQ,50:$VR,51:$VS,52:$VT,53:$VU,56:$VV})],
defaultActions: {2:[2,1],5:[2,2]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

require('./parser.proto.js')(parser);
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: this.unput(yy_.yytext[0]); this.popState(); 
break;
case 1: this.indent.cnt++; 
break;
case 2:
	if(this.indent.current > 0){
		this.unput(' ');
		if(this.indent.nl == 0){
			this.indent.nl = 1;
			return 5;
		}
		this.indent.current -= this.indent.size;
		return 24;
	}else{
		this.popState();
		this.indent.size = 0;
		this.indent.cnt = 0;
		this.indent.current = 0;
		if(this.indent.nl == 0)
			return 5;
		this.indent.nl = 0;
	}

break;
case 3:
	if(this.indent.cnt != 0 && this.indent.size == 0){
		this.indent.size = this.indent.cnt;
	}
	if(this.indent.cnt == this.indent.current){
		this.unput(yy_.yytext[0]);
		this.popState();
		if(this.indent.nl == 1){
			this.indent.nl = 0;
		}else{
			return 5;
		}
	}else if(this.indent.cnt == this.indent.current+this.indent.size){
		this.indent.current = this.indent.cnt;
		this.unput(yy_.yytext[0]);
		this.popState();
		return 23;
	}else if(this.indent.cnt < this.indent.current && this.indent.cnt%this.indent.size == 0){
		this.unput(yy_.yytext[0]);
		if(this.indent.nl == 0){
			this.indent.nl = 1;
			return 5;
		}
		this.indent.current -= this.indent.size;
		return 24;
	}else{
		this.unput(yy_.yytext[0]);
		this.popState();
		return this.indent.ERROR;
	}

break;
case 4: return 'WS'; 
break;
case 5: yy_.yytext=yy_.yytext.slice(1); return 62; 
break;
case 6: yy_.yytext=yy_.yytext.slice(1); return 9; 
break;
case 7: this.pushState('INITIAL'); this.sbstack.push(this.braces); this.braces=1; return yy_.yytext; 
break;
case 8: yy_.yytext=yy_.yytext.slice(1); return 'STRING_CMD'; 
break;
case 9: yy_.yytext=yy_.yytext.replace(/\\([\x20\\"${}~])/g,'$1'); return 'STRING_WORD'; 
break;
case 10: return yy_.yytext; 
break;
case 11: return 'STRING_NBSP'; 
break;
case 12: this.popState(); return 'STRING_END'; 
break;
case 13: if(--this.comment==0) this.popState(); 
break;
case 14: this.comment++; 
break;
case 15:/* eat comments */
break;
case 16:/* eat comments */
break;
case 17:
	if(--this.jsbodycnt==0){
		this.popState();
		yy_.yytext = this.jsbody;
		this.jsbody = null;
		return 'JSBODY';
	}
	this.jsbody += yy_.yytext;

break;
case 18: this.jsbodycnt++; this.jsbody += yy_.yytext; 
break;
case 19: this.jscomment = 1; this.begin('jscomment'); 
break;
case 20:/* eat */
break;
case 21: this.jsbody += yy_.yytext; 
break;
case 22: this.jsbody += yy_.yytext; 
break;
case 23: this.jsbody += ' '; 
break;
case 24: this.jsbody += yy_.yytext; 
break;
case 25: this.jsbody += yy_.yytext; 
break;
case 26: if(--this.jscomment==0) this.popState(); 
break;
case 27: this.jscomment++; 
break;
case 28:/* eat */
break;
case 29:/* eat */
break;
case 30: return 50; 
break;
case 31:/* eat whitespace */
break;
case 32: this.comment = 1; this.begin('comment'); 
break;
case 33: yy.parser.comment(yy_.yytext); 
break;
case 34: if(this.braces==0) {this.begin('indent'); this.indent.cnt = 0;} 
break;
case 35: this.begin('indent'); this.unput(' '); 
break;
case 36: this.begin('string'); return 'STRING_START'; 
break;
case 37: yy_.yytext=yy_.yytext.slice(1,-1).replace(/\\(['\\])/g,'$1'); return 66; 
break;
case 38: return yy_.yytext; 
break;
case 39: return 34; 
break;
case 40: return 33; 
break;
case 41: return 54; 
break;
case 42: return yy_.yytext; 
break;
case 43: this.braces++; return yy_.yytext; 
break;
case 44:
	this.braces--;
	if(this.braces == 0 && this.stateStackSize()>1){
		this.popState();
		this.braces = this.sbstack.pop();
	}
	return yy_.yytext;

break;
case 45: this.jsbodycnt = 1; this.jsbody = ''; return yy_.yytext.toUpperCase(); 
break;
case 46: if(this.jsbodycnt > 0){ this.begin('jsbody'); } else { this.braces++; return yy_.yytext; } 
break;
case 47: return yy_.yytext.toUpperCase(); 
break;
case 48: return 15; 
break;
case 49: return 65; 
break;
case 50: if(yy_.yytext[0]=='`') yy_.yytext=yy_.yytext.slice(1); return 9; 
break;
case 51: return 62; 
break;
case 52: return 63; 
break;
case 53: return 64; 
break;
case 54: return 'INVALID_TOKEN'; 
break;
case 55:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:[#\n])/,/^(?:[ \t])/,/^(?:$)/,/^(?:.)/,/^(?:[\s]+)/,/^(?:\$(?:[1-9][0-9]*|0))/,/^(?:\$[`.]?([_A-Za-z][\w]*)(?:[.]([_A-Za-z][\w]*))*)/,/^(?:\$[({])/,/^(?:\\([_A-Za-z][\w]*))/,/^(?:(?:\\[^A-Za-z_]|[^\$~{}\\"\s])+)/,/^(?:[{}])/,/^(?:[~]+)/,/^(?:")/,/^(?:=#)/,/^(?:#=)/,/^(?:[^=#]+)/,/^(?:.)/,/^(?:\})/,/^(?:\{)/,/^(?:\/\*)/,/^(?:\/\/(?:[^\n]*\\\n)*[^\n]*)/,/^(?:["](?:\\.|[^\\"])*["])/,/^(?:['](?:\\.|[^\\'])*['])/,/^(?:[ \f\r\t\v\n]+)/,/^(?:[^'"\/{} \f\r\t\v\n]+)/,/^(?:.)/,/^(?:\*\/)/,/^(?:\/\*)/,/^(?:[^\/*]+)/,/^(?:.)/,/^(?:[ \f\t\v]-(?![ \f\t\v]))/,/^(?:[ \f\r\t\v]+)/,/^(?:#=)/,/^(?:#(?!=)(?:[^\n]*\\\n)*[^\n]*)/,/^(?:\n)/,/^(?:$)/,/^(?:")/,/^(?:['](?:\\.|[^\\'])*['])/,/^(?:\|\||&&|===|==|!==|!=|<=|>=|>>|<<|=)/,/^(?:and)/,/^(?:or)/,/^(?:not)/,/^(?:[?|&!><=+%~\/*^:\-])/,/^(?:[\[(])/,/^(?:[)}\]])/,/^(?:native)/,/^(?:\{)/,/^(?:if|elseif|else|while|function|local|set|unset|return|break|continue|pattern|throw|namespace|dispatcher|extends|extend|yield|on|dialog|option|combine|location|object)/,/^(?:::[a-z]+)/,/^(?:true|false|undefined)/,/^(?:[`.]?([_A-Za-z][\w]*)(?:[.]([_A-Za-z][\w]*))*)/,/^(?:[0-9]*\.?[0-9]+(?:[eE][-+]?[0-9]+)?)/,/^(?:0[Xx][0-9a-fA-F]+)/,/^(?:0[bB][01]+)/,/^(?:.)/,/^(?:.)/],
conditions: {"jscomment":{"rules":[26,27,28,29],"inclusive":false},"jsbody":{"rules":[17,18,19,20,21,22,23,24,25],"inclusive":false},"comment":{"rules":[13,14,15,16],"inclusive":false},"string":{"rules":[4,5,6,7,8,9,10,11,12],"inclusive":false},"indent":{"rules":[0,1,2,3],"inclusive":false},"INITIAL":{"rules":[30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
lexer.reset = function(){
	this.sbstack = [];
	this.braces = 0;
	this.jsbodycnt = 0;
	this.indent = {
		cnt:0,
		size:0,
		current:0,
		nl:0
	};
};;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}